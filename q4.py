# Вопрос 4. Линейный поиск. Использование двух указателей.
# Решение задачи поиска отрезка с максимальной суммой. Задача. Дан массив a0, a1, .... an−1. Требуется
# найти отрезок массива с индексами с i по j (i≤j) такой, что сумма элементов ai+ai+1+...+aj
# максимально возможная.

def max_subarray(nums):
    start, end = 0, 0
    best_sum, current_sum = nums[0], nums[0]
    for i in range(1, len(nums)):
        if nums[i] > current_sum + nums[i]:
            start, end = i, i
            current_sum = nums[i]
        else:
            end = i
            current_sum += nums[i]
        if current_sum > best_sum:
            start = start
            end = i
            best_sum = current_sum
    return start, end
  
# a = [1, -2, 3, 10, -4, 7, 2, -5]
# start, end = max_subarray(a)
# print(f"The subarray with maximum sum is from index {start} to {end}")
  
# Для решения этой задачи можно использовать алгоритм "максимальной подсуммы" (maximum subarray), который использует два указателя для поиска отрезка с максимальной суммой элементов.

# Кратко, алгоритм работает следующим образом:

#     Инициализировать два указателя: "начало" и "конец" отрезка (начало = конец = 0) и переменную "наилучшая_сумма" равной a0.
#     Перебирать индексы от 1 до n-1:
#     a. Если текущий элемент больше суммы текущего отрезка (начало до i-1), то начало отрезка переносим на i.
#     b. Обновляем конец отрезка на i, если текущая сумма отрезка больше текущей наилучшей суммы.
#     c. Обновляем наилучшую сумму, если текущая сумма отрезка больше текущей наилучшей суммы.
#     Возвращаем отрезок с индексами начала и конца, который соответствует наилучшей сумме элементов.
