# Вопрос 3. Линейный поиск. Префиксные суммы. Решение задачи о сумме подряд идущих элементов.
# Задача. Дан массив целых чисел a0, a1, .... an−1 и натуральные числа k, m. Укажите минимальное
# значение i, для которого ai+a(i+1)+...+a(i+k) =m (то есть сумма k+1 подряд идущих элементов массива
# равна m). Если такого значения нет, то выведите 0.


def find_subarray_sum(arr, k, m):
    n = len(arr)
    prefix_sum = [0] * (n+1)
    for i in range(1, n+1):
        prefix_sum[i] = prefix_sum[i-1] + arr[i-1]
    
    for i in range(n-k+1):
        if prefix_sum[i+k] - prefix_sum[i] == m:
            return i+1 # индексация в задаче начинается с 1
    return 0
  
#   Для решения этой задачи можно использовать алгоритм линейного поиска со сложностью O(n*k), где n - длина массива, а k - длина подмассива.

# Однако, можно использовать префиксные суммы для оптимизации алгоритма. Для этого нужно вычислить массив префиксных сумм prefix_sum, где prefix_sum[i] = a[0] + a[1] + ... + a[i-1]. Тогда сумма элементов на отрезке от i до j будет равна prefix_sum[j+1] - prefix_sum[i].

# Далее, мы можем перебирать все возможные подмассивы длины k и для каждого подмассива вычислять его сумму через префиксные суммы. Если сумма совпадает с m, то мы нашли ответ и можем вернуть индекс i. В противном случае, продолжим перебор. Если ни одного подмассива длины k с суммой m не найдено, то вернем 0.
