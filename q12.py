# Вопрос 12. Бинарный поиск по ответу. Метод реализации. Задача «Коровы в стойла». На прямой расположены стойла, в которые необходимо расставить коров так, чтобы минимальное расстояние между коровами было как можно больше.


# Для решения задачи "Коровы в стойла" можно использовать бинарный поиск по ответу. Этот метод заключается в том, что мы сначала задаем некоторый диапазон возможных ответов, а затем последовательно сужаем этот диапазон до тех пор, пока не найдем искомый ответ.

# В данной задаче можно использовать следующий алгоритм:

#     Отсортируйте массив стойл по возрастанию координат.
#     Задайте диапазон возможных ответов: от 0 до последней координаты стойла.
#     Выполните бинарный поиск по ответу. На каждой итерации вычисляйте среднее значение диапазона возможных ответов. Затем проверьте, можно ли расставить коров в стойлах с расстоянием, равным этому значению. Для этого пройдитесь по стойлам и посмотрите, можно ли поставить корову в текущее стойло или в следующее стойло с расстоянием, равным выбранному значению. Если можно, то продолжите поиск в правой половине диапазона возможных ответов, иначе - в левой.
#     Когда диапазон возможных ответов сузится до одного значения, найденное значение и будет искомым минимальным расстоянием между коровами.

def check_cows_distance(stalls, cows_count, distance):
    last_cow_pos = stalls[0]
    placed_cows = 1
    for i in range(1, len(stalls)):
        if stalls[i] - last_cow_pos >= distance:
            placed_cows += 1
            last_cow_pos = stalls[i]
        if placed_cows >= cows_count:
            return True
    return False

def find_max_cows_distance(stalls, cows_count):
    left, right = 0, stalls[-1]
    result = 0
    while left <= right:
        mid = (left + right) // 2
        if check_cows_distance(stalls, cows_count, mid):
            result = mid
            left = mid + 1
        else:
            right = mid - 1
    return result

# Это пример кода, который можно использовать для решения задачи "Коровы в стойла". Он содержит две функции. Первая функция `check_cows_distance` проверяет, можно ли расставить коров в стойлах с расстоянием, равным заданному значению. Она проходит по всем стойлам и проверяет, можно ли поставить корову в текущее стойло или в следующее стойло с расстоянием, равным заданному значению. Если можно, то количество расставленных коров увеличивается на 1, и продолжается проверка для следующей коровы. Если количество расставленных коров достигает требуемого числа, функция возвращает `True`, иначе - `False`.

# Вторая функция `find_max_cows_distance` выполняет бинарный поиск по ответу. Она задает диапазон возможных ответов: от 0 до последней координаты стойла, и на каждой итерации вычисляет среднее значение диапазона возможных ответов. Затем для этогозначения вызывается функция `check_cows_distance` для проверки, можно ли расставить коров в стойлах с расстоянием, равным этому значению. Если можно, то результат сохраняется в переменной `result`, и поиск продолжается в правой половине диапазона возможных ответов. Если нельзя, то поиск продолжается в левой половине диапазона.

# После завершения бинарного поиска по ответу, функция `find_max_cows_distance` возвращает искомое минимальное расстояние между коровами.

python
stalls = [1, 2, 4, 8, 9]
cows_count = 3

max_distance = find_max_cows_distance(stalls, cows_count)

print(max_distance) # 3

