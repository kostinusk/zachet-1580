# Вопрос 11. Бинарный поиск по ответу. Метод реализации. Задача «Очень легкая задача». Сегодня утром жюри решило добавить в вариант олимпиады еще одну, Очень Легкую Задачу. Ответственный секретарь Оргкомитета напечатал ее условие в одном экземпляре, и теперь ему нужно до начала олимпиады успеть сделать еще N копий. В его распоряжении имеются два ксерокса, один из которых копирует лист за х секунд, а другой – за y. Разрешается использовать как один ксерокс, так и оба одновременно. Можно копировать не только с оригинала, но и с копии. Помогите ему выяснить, какое минимальное время для этого потребуется.

#  Мы можем использовать двоичный поиск для поиска минимального времени, в которое можно скопировать все листы. Для этого мы будем выбирать время в середине диапазона возможных времен и проверять, можно ли скопировать все листы за это время. Если да, мы будем продолжать поиск в левой половине диапазона, если нет, то в правой. Процесс будет продолжаться до тех пор, пока диапазон не сократится до одного числа - это и будет минимальное время, за которое можно скопировать все листы.

def can_copy_all_papers(n, x, y, mid_time):
    # проверяем, можно ли скопировать все листы за mid_time
    return (mid_time // x) + (mid_time // y) >= n

def min_time_to_copy_all_papers(n, x,y):
    # инициализируем границы времени
    left_time = 0
    right_time = max(x, y) * n

    # выполняем бинарный поиск по ответу
    while left_time < right_time:
        mid_time = (left_time + right_time) // 2
        if can_copy_all_papers(n, x, y, mid_time):
            right_time = mid_time
        else:
            left_time = mid_time + 1

    # возвращаем минимальное время
    return left_time
  
n = 5
x = 1
y = 2

min_time = min_time_to_copy_all_papers(n, x, y)

print(min_time) # выводит 4
